// Copyright (c) 2019 IoTeX
// This is an alpha (internal) release and is not suitable for production. This
// source code is provided 'as is' and no warranties are given as to title or
// non-infringement, merchantability or fitness for purpose and, to the extent
// permitted by law, all liability for your use of the code is disclaimed. This
// source code is governed by Apache License 2.0 that can be found in the
// LICENSE file.

// To compile the proto, run:
//      protoc -I. -I ./../types --go_out=plugins=grpc:$GOPATH/src *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: abci.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckTxType int32

const (
	CheckTxType_NEW     CheckTxType = 0
	CheckTxType_RECHECK CheckTxType = 1
)

// Enum value maps for CheckTxType.
var (
	CheckTxType_name = map[int32]string{
		0: "NEW",
		1: "RECHECK",
	}
	CheckTxType_value = map[string]int32{
		"NEW":     0,
		"RECHECK": 1,
	}
)

func (x CheckTxType) Enum() *CheckTxType {
	p := new(CheckTxType)
	*p = x
	return p
}

func (x CheckTxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckTxType) Descriptor() protoreflect.EnumDescriptor {
	return file_abci_proto_enumTypes[0].Descriptor()
}

func (CheckTxType) Type() protoreflect.EnumType {
	return &file_abci_proto_enumTypes[0]
}

func (x CheckTxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckTxType.Descriptor instead.
func (CheckTxType) EnumDescriptor() ([]byte, []int) {
	return file_abci_proto_rawDescGZIP(), []int{0}
}

type RequestCheckTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx   []byte      `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Type CheckTxType `protobuf:"varint,2,opt,name=type,proto3,enum=api.CheckTxType" json:"type,omitempty"`
}

func (x *RequestCheckTx) Reset() {
	*x = RequestCheckTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abci_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCheckTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCheckTx) ProtoMessage() {}

func (x *RequestCheckTx) ProtoReflect() protoreflect.Message {
	mi := &file_abci_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCheckTx.ProtoReflect.Descriptor instead.
func (*RequestCheckTx) Descriptor() ([]byte, []int) {
	return file_abci_proto_rawDescGZIP(), []int{0}
}

func (x *RequestCheckTx) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *RequestCheckTx) GetType() CheckTxType {
	if x != nil {
		return x.Type
	}
	return CheckTxType_NEW
}

type ResponseCheckTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data      []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Log       string `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"`
	Info      string `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	GasWanted int64  `protobuf:"varint,5,opt,name=gas_wanted,json=gasWanted,proto3" json:"gas_wanted,omitempty"`
	GasUsed   int64  `protobuf:"varint,6,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
}

func (x *ResponseCheckTx) Reset() {
	*x = ResponseCheckTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abci_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseCheckTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseCheckTx) ProtoMessage() {}

func (x *ResponseCheckTx) ProtoReflect() protoreflect.Message {
	mi := &file_abci_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseCheckTx.ProtoReflect.Descriptor instead.
func (*ResponseCheckTx) Descriptor() ([]byte, []int) {
	return file_abci_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseCheckTx) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseCheckTx) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponseCheckTx) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *ResponseCheckTx) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *ResponseCheckTx) GetGasWanted() int64 {
	if x != nil {
		return x.GasWanted
	}
	return 0
}

func (x *ResponseCheckTx) GetGasUsed() int64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

var File_abci_proto protoreflect.FileDescriptor

var file_abci_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70,
	0x69, 0x22, 0x46, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x74, 0x78, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x61, 0x73, 0x5f, 0x77, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x67, 0x61, 0x73, 0x57, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x61,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x2a, 0x23, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x57, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x45, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x01, 0x32, 0x47, 0x0a, 0x0f, 0x41, 0x42,
	0x43, 0x49, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x07, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x1a, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x78, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_abci_proto_rawDescOnce sync.Once
	file_abci_proto_rawDescData = file_abci_proto_rawDesc
)

func file_abci_proto_rawDescGZIP() []byte {
	file_abci_proto_rawDescOnce.Do(func() {
		file_abci_proto_rawDescData = protoimpl.X.CompressGZIP(file_abci_proto_rawDescData)
	})
	return file_abci_proto_rawDescData
}

var file_abci_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_abci_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_abci_proto_goTypes = []interface{}{
	(CheckTxType)(0),        // 0: api.CheckTxType
	(*RequestCheckTx)(nil),  // 1: api.RequestCheckTx
	(*ResponseCheckTx)(nil), // 2: api.ResponseCheckTx
}
var file_abci_proto_depIdxs = []int32{
	0, // 0: api.RequestCheckTx.type:type_name -> api.CheckTxType
	1, // 1: api.ABCIApplication.CheckTx:input_type -> api.RequestCheckTx
	2, // 2: api.ABCIApplication.CheckTx:output_type -> api.ResponseCheckTx
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_abci_proto_init() }
func file_abci_proto_init() {
	if File_abci_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_abci_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCheckTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abci_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseCheckTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_abci_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_abci_proto_goTypes,
		DependencyIndexes: file_abci_proto_depIdxs,
		EnumInfos:         file_abci_proto_enumTypes,
		MessageInfos:      file_abci_proto_msgTypes,
	}.Build()
	File_abci_proto = out.File
	file_abci_proto_rawDesc = nil
	file_abci_proto_goTypes = nil
	file_abci_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ABCIApplicationClient is the client API for ABCIApplication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ABCIApplicationClient interface {
	CheckTx(ctx context.Context, in *RequestCheckTx, opts ...grpc.CallOption) (*ResponseCheckTx, error)
}

type aBCIApplicationClient struct {
	cc grpc.ClientConnInterface
}

func NewABCIApplicationClient(cc grpc.ClientConnInterface) ABCIApplicationClient {
	return &aBCIApplicationClient{cc}
}

func (c *aBCIApplicationClient) CheckTx(ctx context.Context, in *RequestCheckTx, opts ...grpc.CallOption) (*ResponseCheckTx, error) {
	out := new(ResponseCheckTx)
	err := c.cc.Invoke(ctx, "/api.ABCIApplication/CheckTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ABCIApplicationServer is the server API for ABCIApplication service.
type ABCIApplicationServer interface {
	CheckTx(context.Context, *RequestCheckTx) (*ResponseCheckTx, error)
}

// UnimplementedABCIApplicationServer can be embedded to have forward compatible implementations.
type UnimplementedABCIApplicationServer struct {
}

func (*UnimplementedABCIApplicationServer) CheckTx(context.Context, *RequestCheckTx) (*ResponseCheckTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTx not implemented")
}

func RegisterABCIApplicationServer(s *grpc.Server, srv ABCIApplicationServer) {
	s.RegisterService(&_ABCIApplication_serviceDesc, srv)
}

func _ABCIApplication_CheckTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCheckTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABCIApplicationServer).CheckTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ABCIApplication/CheckTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABCIApplicationServer).CheckTx(ctx, req.(*RequestCheckTx))
	}
	return interceptor(ctx, in, info, handler)
}

var _ABCIApplication_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ABCIApplication",
	HandlerType: (*ABCIApplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckTx",
			Handler:    _ABCIApplication_CheckTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "abci.proto",
}
